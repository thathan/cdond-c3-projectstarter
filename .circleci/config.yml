version: 2.1

orbs:
  aws-s3: circleci/aws-s3@2.0.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters: 
      workflow_id: 
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            if ! (aws s3 ls "s3://udapeople-<< parameters.workflow_id >>" 2>&1 | grep -q 'NoSuchBucket')
            then
              aws s3 rm "s3://udapeople-<< parameters.workflow_id >>" --recursive
            fi
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.workflow_id >>"
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.workflow_id >>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id: 
        type: string     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/BB3axYh7AzkRn1f9CUV3Up/migration_<< parameters.workflow_id >>)
            if [ "$SUCCESS" = 1 ]
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [frontend-build]
      - run:
          name: Run front-end unit tests
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [backend-build]
      - run:
          name: Run back-end unit tests
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [backend-build]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Install tar and gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
    filters:
      branches:
        only:
          - master  

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys: 
          fingerprints: ["9c:06:d5:bf:bb:76:b5:fa:2b:cc:60:77:24:08:d2:65"]
      - run: 
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible && pip3 install --upgrade pip && pip3 install --no-cache-dir awscli
      - attach_workspace: 
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  
    filters:
      branches:
        only:
          - master 

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Install dependencies
          command: |
            sudo apt update && sudo apt install awscli
      - restore_cache: 
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            echo "Dump is:"
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo "Sending migration results to kvdb"
              curl --insecure https://kvdb.io/BB3axYh7AzkRn1f9CUV3Up/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
    filters:
      branches:
        only:
          - master 

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install aws cli
          command: |
            sudo apt update && sudo apt install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
      - aws-s3/copy:
          aws-region: AWS_DEFAULT_REGION
          arguments: '--recursive'
          from: ~/project/frontend/dist
          to: 's3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}'

      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
    filters:
      branches:
        only:
          - master 
                    
  deploy-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys: 
          fingerprints: ["9c:06:d5:bf:bb:76:b5:fa:2b:cc:60:77:24:08:d2:65"] 
      - attach_workspace: 
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt -y update
            test -e /usr/bin/python3 || sudo apt install -y python3
            sudo apt install -y tar gzip ansible
            sudo apt install awscli
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf ~/artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
    filters:
      branches:
        only:
          - master 

  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt -y update
            test -e /usr/bin/python3 || sudo apt install -y python3
            sudo apt install awscli
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl --connect-timeout 10 --max-time 10 --retry 10 --retry-delay 0 --retry-max-time 180 --retry-connrefused "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
    filters:
      branches:
        only:
          - master 

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo $OldWorkflowID >> OldWorkflowID.txt
            echo ***
            pwd
            echo ****
            ls
            cat OldWorkflowID.txt
            aws cloudformation deploy --template-file .circleci/files/cloudfront.yml --stack-name "udacity-cloudfront-stack" --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" --tags project=udapeople
      - persist_to_workspace:
          root: ~/
          paths:
            - project/OldWorkflowID.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
    filters:
      branches:
        only:
          - master 

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - attach_workspace: 
          at: ~/
      - run:
          name: Remove old stacks and files
          command: |
            echo "***"
            pwd
            ls
            cat ~/project/OldWorkflowID.txt
            export OldWorkflowID=$(cat ~/project/OldWorkflowID.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "Deleting bucket s3://udapeople-${OldWorkflowID}"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
    filters:
      branches:
        only:
          - master 
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
